# app.py
import numpy as np
import streamlit as st
import pandas as pd
import numpy as np
import joblib

from pathlib import Path
import base64

from sklearn.base import BaseEstimator, TransformerMixin

class PositiveClipper(BaseEstimator, TransformerMixin):
    """
    Ce transformateur personnalis√© est utilis√© dans le pipeline pour :
    - Nettoyer les donn√©es avant une transformation logarithmique
    - Remplacer les valeurs infinies ou manquantes par 0
    - √âliminer les valeurs n√©gatives en les 'clippant' √† 0
    """    
    def fit(self, X, y=None):
        return self
    def transform(self, X):
        X = np.where(np.isfinite(X), X, 0)
        return np.clip(X, a_min=0, a_max=None)


def set_bg_from_local(image_path):
    """Affiche une image de fond √©claircie pour am√©liorer la lisibilit√©"""
    with open(image_path, "rb") as img_file:
        encoded = base64.b64encode(img_file.read()).decode()
    css = f"""
    <style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{encoded}");
        background-size: cover;
        background-attachment: fixed;
        background-repeat: no-repeat;
        position: relative;
    }}

    /* Overlay √©claircissant */
    .stApp::before {{
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.6);  /* Blanc semi-transparent */
        z-index: 0;
    }}

    /* S'assurer que tout le contenu passe au-dessus */
    .stApp > * {{
        position: relative;
        z-index: 1;
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

# Titre
st.title(" Pr√©diction de souscription bancaire")
st.markdown("Mod√®le bas√© sur pipeline : log1p + binarisation + OneHot + standardisation")

# Chargement du pipeline entra√Æn√©
model = joblib.load("model_pipeline.pkl")  

# Entr√©e utilisateur
st.header("üßæ Param√®tres client")

# Groupe 1 : variables num√©riques
col1, col2, col3 = st.columns(3)

with col1:
    duration = st.slider("Dur√©e de l'appel (sec)", 0, 5000, 180)

with col2:
    balance = st.number_input("Solde moyen (‚Ç¨)", -2000, 100000, 1000)

with col3:
    campaign = st.slider("Contacts campagne", 1, 50, 1)

col4, col5 = st.columns(2)

with col4:
    pdays = st.slider("Jours depuis dernier contact", -1, 999, -1)

with col5:
    previous = st.slider("Nb de contacts pr√©c√©dents", 0, 100, 0)

# Groupe 2 : variables cat√©gorielles
col6, col7 = st.columns(2)

with col6:
    job = st.selectbox("Profession", [
        'admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management',
        'retired', 'self-employed', 'services', 'student', 'technician', 'unemployed'
    ])
    contact = st.selectbox("Type de contact", ['cellular', 'telephone', 'unknown'])
    poutcome = st.selectbox("R√©sultat pr√©c√©dente", ['success', 'failure', 'other', 'non_contact√©'])

with col7:
    education = st.selectbox("√âducation", ['primary', 'secondary', 'tertiary'])
    month = st.selectbox("Mois du contact", [
        'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul',
        'aug', 'sep', 'oct', 'nov', 'dec'
    ])
    cluster = st.selectbox("Cluster client", [0, 1, 2])

# Donn√©es r√©unies dans un DataFrame
client_input = pd.DataFrame([{
    'duration': duration,
    'balance': balance,
    'campaign': campaign,
    'pdays': pdays,
    'previous': previous,
    'job': job,
    'education': education,
    'contact': contact,
    'month': month,
    'poutcome': poutcome,
    'cluster': cluster
}])

# Pr√©diction
proba = model.predict_proba(client_input)[0, 1]
pred = model.predict(client_input)[0]

# Affichage
st.subheader("üìà R√©sultat")
st.metric("Probabilit√© de souscription √† des d√©p√¥ts √† terme", f"{proba*100:.2f} %")
if pred == 1:
    st.success("‚úÖ Le client est susceptible de souscrire.")
else:
    st.warning("‚ùå Le client ne semble pas int√©ress√©.")

# Visualisation simple (jauge)
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.barh(["Client"], [proba], color="green" if pred == 1 else "red")
ax.set_xlim(0, 1)
ax.set_title("Niveau de probabilit√© de souscription")
st.pyplot(fig)
